
!obj:pylearn2.train.Train {
    dataset: !obj:keypoint_Dataset.KeypointDataset {
        which_set: 'train'
    },
    "model": !obj:pylearn2.autoencoder.DenoisingAutoencoder {
        "nvis" : 2304,
        "nhid" : 4000,
        "irange" : 0.05,
        "corruptor": !obj:pylearn2.corruption.BinomialCorruptor {
            "corruption_level": 0.5,
        },
        "act_enc": "tanh",
        "act_dec": null,    # Linear activation on the decoder side.
    },

    # We use SGD as our training algorithm
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 100,
        learning_rate: 1e-3,
        # What we monitor
        #line_search_mode: 'exhaustive',
        init_momentum: 0.5,
        monitoring_dataset:
            {
                'train' : *train ,
                'valid' : !obj:keypoint_Dataset.KeypointDataset {
                              which_set: 'train',
                              keypointNumber: {0},
                              start: 0.70, # Keep the last 500 exemples as validation set
                              stop: 1.0,
                              preprocessor: !obj:pylearn2.datasets.preprocessing.Standardize {},
                              fit_preprocessor: True,
                              fit_test_preprocessor: True,
                          }
                # We don't have labels for the public test set
            },
        # The cost function is
        cost: !obj:pylearn2.costs.mlp.missing_target_cost.MissingTargetCost {
        },
        cost : !obj:pylearn2.costs.cost.SumOfCosts {
                costs: [
                        !obj:pylearn2.costs.mlp.missing_target_cost.MissingTargetCost {},
                        !obj:pylearn2.costs.mlp.WeightDecay { coeffs: [ .0001, .0001, .0001  ] },
                       ],
           },
        # The termination criteria
        termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
            channel_name: "valid_objective"
        }
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_objective',
             save_path: "{1}/generic_keypoint_{0}.pkl"
        },
    ]
}